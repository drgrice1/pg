## DESCRIPTION
## Answer could be a string or another data type
## ENDDESCRIPTION

## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(PGML tutorial 2015)
## Date(06/01/2015)
## Institution(Hope College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('algebra', 'answer is a string or other data type')

#:% name = String or Other Type
#:% type = Sample
#:% subject = [algebra, precalculus]
#:% categories = [strings]
#:% see_also = [StringsInContext.pg]

#:% section = preamble
DOCUMENT();

loadMacros('PGstandard.pl', 'PGML.pl', 'PGcourse.pl');

#:% section = setup
#: There are several predefined strings, such as `NONE`, `DNE`, `INF`, and
#: `INFINITY`. If another string is needed it will need to be added to the
#: context. See PROBLINK('StringsInContext.pg').
#:
#: When `$answer = Formula('2x')` and a student enters the string `NONE`, there
#: will not be an error message. This is because MathObject formula answers
#: are set up to accept string answers that are defined in the context. However,
#: when `$answer = String('none')` and a student enters the formula `2x`, they
#: will get an error message. This is because string answers do not also accept
#: formulas. So use `typeMatch => Formula('x')` so that in this case no error
#: message will appear.
#:
#: It is recommended that you do not use the technique demonstrated in this
#: sample problem anymore. Instead use the method demonstrated in
#: PROBLINK('NoSolution.pg'). That method is more intuitive for students, and
#: does not lead to an invalid statement for the answer such as `y = NONE`.
$y = random(0, 4);

if ($y < 4) {
    $answer = String('none')->cmp(typeMatch => Formula('x'));
} else {
    $answer = Formula('2x');
}

#:% section = statement
BEGIN_PGML
Is there a line through the points [`(0, 0)`], [`(1, 2)`], and [`(2, [$y])`]?
If there is, enter the equation for this line.  If not, enter _NONE_.

[`y =`] [_]{$answer}{15}
END_PGML

#:% section = solution
BEGIN_PGML_SOLUTION
Solution explanation goes here.
END_PGML_SOLUTION

ENDDOCUMENT();
