## DESCRIPTION
## Trigonometric identities
## ENDDESCRIPTION

## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(PGML tutorial 2015)
## Date(06/01/2015)
## Institution(Hope College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('trigonometry', 'trig identity')

#:% name = Trigonometric Identities
#:% type = Sample
#:% subject = [trigonometry, precalculus]
#:% categories = [custom checker]

#:% section = preamble
DOCUMENT();

loadMacros('PGstandard.pl', 'PGML.pl', 'PGcourse.pl');

#:% section = setup
#: To prevent the student from just entering the given expression, a custom
#: answer checker is used, which 1) calls `reduce` on the student answer which
#: will do some small simplification, 2) returns an error if the original
#: expression is entered and 3) then checks if the answer is correct.
#:
#: A better method for doing this is demonstrated in
#: PROBLINK('ProvingTrigIdentities.pg'). Don't use the method demonstrated in
#: this example as it will fail in many cases. A student can enter
#: `tan(x)*cos(x)*2/2` and it will be counted as correct because the `reduce`
#: call does not simplify that to `tan(x)*cos(x)`. Instead it reduces it to
#: `[2*tan(x)*cos(x)]/2`. In general using string comparison is not what you
#: should do with MathObjects. It completely subverts what MathObjects were
#: designed to do.
$ans = Compute('sin(x)')->cmp(
    checker => sub {
        my ($correct, $student, $ansHash) = @_;
        my $stu_ans = $student->reduce;
        Value->Error('There is a simpler answer')
            if $stu_ans->string eq 'cos(x)*tan(x)'
            || $stu_ans->string eq 'tan(x)*cos(x)';
        return $student == $correct ? 1 : 0;
    }
);

#:% section = statement
BEGIN_PGML
Simplify the expression as much as possible.

[`\tan(x)\cos(x) =`] [_]{$ans}{15}
END_PGML

#:% section = solution
BEGIN_PGML_SOLUTION
Solution explanation goes here.
END_PGML_SOLUTION

ENDDOCUMENT();
